<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="org.joonzis.mapper.FriendMapper">

	<resultMap id="FriendWithMemberMap" type="org.joonzis.domain.FriendVO">
	    <result property="mem_no" column="mem_no"/>
	    <result property="friend_mem_no" column="friend_mem_no"/>
	    <result property="fre_memo" column="fre_memo"/>
	    
	    <association property="friendMember" javaType="org.joonzis.domain.MemberVO">
	        <result property="mem_no" column="friend_mem_no"/> <!-- 친구의 번호 -->
	        <result property="mem_img" column="mem_img"/>
	        <result property="mem_nick" column="mem_nick"/>
	    </association>
	</resultMap>
	
	<select id="getFriendList" parameterType="int" resultMap="FriendWithMemberMap">
	    SELECT 
	        f.mem_no,
	        f.friend_mem_no,
	        f.fre_memo,
	        m.mem_img,
	        m.mem_nick
	    FROM friend f
	    JOIN member m ON f.friend_mem_no = m.mem_no
	    WHERE f.mem_no = #{mem_no}
	</select>
	
	<delete id="removeFriend">
		DELETE FROM friend
		WHERE mem_no = #{mem_no}
		AND friend_mem_no = #{friend_mem_no}
	</delete>
	
	<select id="getRandomFriendList" parameterType="int" resultMap="FriendWithMemberMap">
	 <![CDATA[
		SELECT *
		FROM (
		  SELECT m.*
		  FROM member m
		  WHERE m.mem_no != #{mem_no}
		    AND m.mem_no NOT IN (
		      SELECT f.friend_mem_no
		      FROM friend f
		      WHERE f.mem_no = #{mem_no}
		    )
		  ORDER BY DBMS_RANDOM.VALUE
		)
		WHERE ROWNUM <= 10
		 ]]>
	</select>
	
	<insert id="insertFriend" parameterType="org.joonzis.domain.FriendVO">
	    INSERT INTO friend (mem_no, friend_mem_no)
	    VALUES (#{mem_no}, #{friend_mem_no})
	</insert>
	
	<!-- 친구 요청 존재 여부 확인 -->
    <select id="checkRequestExist" resultType="int">
	  SELECT COUNT(*)
	  FROM friend_req
	  WHERE mem_no = #{senderMemNo}
	    AND mem_no2 = #{receiverMemNo}
	</select>

    <!-- 친구 요청 삽입 -->
    <insert id="insertFriendRequest">
        INSERT INTO friend_req (mem_no, mem_no2, frd_req)
        VALUES (#{senderMemNo}, #{receiverMemNo}, 'PENDING')
    </insert>

    <!-- 요청 상태 업데이트 -->
    <update id="updateRequestStatus">
        UPDATE friend_req
        SET frd_req = #{status}
        WHERE mem_no = #{senderMemNo}
          AND mem_no2 = #{receiverMemNo}
    </update>
    
    <!-- 요청 상태 초기화 -->
    <delete id="deleteFriendRequest">
    	DELETE FROM FRIEND_REQ
    	WHERE mem_no = #{senderMemNo}
    	  AND mem_no2 = #{receiverMemNo}
    </delete>

    <!-- 친구 관계 등록 -->
    <insert id="insertFriendAfterRequestAccepted">
        INSERT INTO friend (mem_no, friend_mem_no)
        VALUES (#{senderMemNo}, #{receiverMemNo})
    </insert>
		
	<select id="searchFriendByNickname" parameterType="String" resultType="org.joonzis.domain.MemberVO">
    	SELECT mem_no, mem_nick, mem_img
    	FROM MEMBER
    	WHERE mem_nick LIKE #{keyword}
	</select>
	
	<!-- 오프라인 친구 요청 확인 -->
	<select id="getPendingRequest" resultType="org.joonzis.domain.FriendReqVO">
		SELECT fr.mem_no, 
		       m.mem_nick, 
		       fr.mem_no2, 
		       fr.frd_req
		FROM friend_req fr
		JOIN member m ON fr.mem_no = m.mem_no
		WHERE fr.mem_no2 = #{mem_no} AND fr.frd_req = 'PENDING'
	</select>
	
</mapper>