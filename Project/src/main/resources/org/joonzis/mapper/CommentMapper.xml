<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="org.joonzis.mapper.CommentMapper">
	<!-- 코멘트 목록 조회 -->
	<select id="getCommentsByRestNo" parameterType="int" resultMap="commentResultMap">
	    SELECT c.com_no, c.rest_no, c.mem_no, c.com_con, c.com_rate, c.com_date,
	           m.mem_no AS member_mem_no, m.mem_name, m.mem_nick, m.mem_img,
	           a.att_uuid, a.att_path, a.att_name
	    FROM "COMMENT" c
	    LEFT JOIN "MEMBER" m ON c.mem_no = m.mem_no
	    LEFT JOIN attach a ON c.com_no = a.com_no
	    WHERE c.rest_no = #{rest_no}
	    ORDER BY c.com_date DESC
	</select>
	
	<resultMap id="commentResultMap" type="org.joonzis.domain.CommentVO">
	    <id property="com_no" column="com_no"/>
	    <result property="rest_no" column="rest_no"/>
	    <result property="mem_no" column="mem_no"/>
	    <result property="com_con" column="com_con"/>
	    <result property="com_rate" column="com_rate"/>
	    <result property="com_date" column="com_date"/>
	    <association property="com_memberData" javaType="org.joonzis.domain.MemberVO">
	        <id property="mem_no" column="member_mem_no"/>
	        <result property="mem_name" column="mem_name"/>
	        <result property="mem_nick" column="mem_nick"/>
	        <result property="mem_img" column="mem_img"/>
	    </association>
	    <collection property="com_attachList" ofType="org.joonzis.domain.AttachVO"  notNullColumn="att_uuid">
	        <result property="att_uuid" column="att_uuid"/>
	        <result property="att_path" column="att_path"/>
	        <result property="att_name" column="att_name"/>
	        <result property="com_no" column="com_no"/>
	    </collection>
	</resultMap>

    <!-- 코멘트 등록 -->
    <insert id="addComment" parameterType="org.joonzis.domain.CommentVO">
	    <selectKey keyProperty="com_no" resultType="int" order="BEFORE">
	        SELECT SEQ_COMM.NEXTVAL FROM DUAL
	    </selectKey>
	    INSERT INTO "COMMENT" (com_no, mem_no, rest_no, com_con, com_date, com_rate)
	    VALUES (#{com_no}, #{mem_no}, #{rest_no}, #{com_con}, SYSDATE, #{com_rate})
	</insert>
	
	<!-- 코멘트 삭제 -->
    <delete id="deleteComment" parameterType="int">
        DELETE FROM "COMMENT" WHERE com_no = #{com_no}
    </delete>

    <!-- 코멘트 조회 (권한 확인용) -->
    <select id="getCommentById" parameterType="int" resultType="org.joonzis.domain.CommentVO">
        SELECT com_no, mem_no FROM "COMMENT" WHERE com_no = #{com_no}
    </select>
	
	<!-- 코멘트 평균 평점 -->
	<select id="getAvgRate" resultType="double">
		SELECT COALESCE(AVG(COM_RATE), 0.0) FROM "COMMENT" WHERE REST_NO = #{rest_no}
	</select>
	<!-- 가게 평점 평균 상위 -->
	<select id="getRestAvgRate" resultType="org.joonzis.domain.RestVO">
		<![CDATA[
        SELECT *
			FROM (
			    SELECT r.rest_no, r.rest_name, r.rest_cate, c.avg_rate, c.com_count, i.rest_img_name
			    FROM (
			        SELECT rest_no, 
			               ROUND(AVG(com_rate), 1) AS avg_rate,
			               COUNT(*) AS com_count
			        FROM "COMMENT"
			        GROUP BY rest_no
			    ) c
			    JOIN "RESTAURANT" r ON c.rest_no = r.rest_no
			    JOIN "REST_IMG" i ON r.rest_no = i.rest_no
			    WHERE i.rest_img_no = 1
			    ORDER BY c.avg_rate DESC, c.com_count DESC
			)
			WHERE ROWNUM <= 10
    ]]>
	</select>

	<!-- 가게 리뷰 개수 상위 -->
	<select id="getRestReviewCount" resultType="org.joonzis.domain.RestVO">
		<![CDATA[
		SELECT *
			FROM (
			    SELECT r.rest_no, r.rest_name, r.rest_cate, c.avg_rate, c.com_count, i.rest_img_name
			    FROM (
			        SELECT rest_no,
			            ROUND(AVG(com_rate), 1) AS avg_rate,
			            COUNT(*) AS com_count
			        FROM "COMMENT"
			            GROUP BY rest_no
			    ) c
			    JOIN "RESTAURANT" r ON c.rest_no = r.rest_no
			    JOIN "REST_IMG" i ON r.rest_no = i.rest_no
			    WHERE i.rest_img_no = 1
			    ORDER BY c.com_count DESC, c.avg_rate DESC
			)
			WHERE ROWNUM <= 10
		 ]]>
	</select>
<!-- 	<select id="getRestReviewCount" resultType="org.joonzis.domain.RestVO">
		<![CDATA[
		SELECT r.rest_no, r.rest_name, c.com_count
			FROM (
			    SELECT rest_no, COUNT(*) AS com_count
			    FROM "COMMENT"
			    GROUP BY rest_no
			    ORDER BY com_count DESC
			) c
			JOIN "RESTAURANT" r ON c.rest_no = r.rest_no
			WHERE ROWNUM <= 10
		 ]]>
	</select> -->
	
	<!-- 내 코멘트 목록 조회 -->
	<select id="getCommentList" parameterType="int" resultType="org.joonzis.domain.CommentDTO">
	   SELECT 
		    c.com_no, c.rest_no, c.mem_no, c.com_con, c.com_rate,
		    r.rest_name,
		    i.rest_img_name
		FROM 
		    "COMMENT" c
		LEFT JOIN
		    restaurant r ON c.rest_no=r.rest_no
		LEFT JOIN
		    rest_img i ON c.rest_no=i.rest_no
		WHERE
		    c.mem_no = #{mem_no} 
	    AND
		    i.rest_img_no=1
		ORDER BY
		    c.com_date DESC
	</select>
	
	<!-- 코멘트 연령별 평균 평점 -->
	<select id="getAgeAvgRate" resultType="org.joonzis.domain.CommentVO">
		SELECT 
    FLOOR((
        EXTRACT(YEAR FROM SYSDATE) - 
        EXTRACT(YEAR FROM 
            TO_DATE(
                CASE 
                    WHEN LENGTH(MEM_BIRTH) = 10 AND REGEXP_LIKE(MEM_BIRTH, '^\d{4}-\d{2}-\d{2}$') 
                        THEN MEM_BIRTH
                    WHEN LENGTH(MEM_BIRTH) >= 8 AND REGEXP_LIKE(MEM_BIRTH, '^\d{8,}$') 
                        THEN SUBSTR(MEM_BIRTH, 1, 4) || '-' || SUBSTR(MEM_BIRTH, 5, 2) || '-' || SUBSTR(MEM_BIRTH, 7, 2)
                    ELSE '2000-01-01' -- 유효하지 않은 형식은 기본값으로 대체
                END, 
                'YYYY-MM-DD'
            )
        )
    ) / 10) * 10 AS age_group,
    ROUND(AVG(c.COM_RATE), 1) AS avg_rating
FROM "COMMENT" c
JOIN "MEMBER" m ON c.MEM_NO = m.MEM_NO
WHERE c.REST_NO = #{rest_no}
GROUP BY FLOOR((
    EXTRACT(YEAR FROM SYSDATE) - 
    EXTRACT(YEAR FROM 
        TO_DATE(
            CASE 
                WHEN LENGTH(MEM_BIRTH) = 10 AND REGEXP_LIKE(MEM_BIRTH, '^\d{4}-\d{2}-\d{2}$') 
                    THEN MEM_BIRTH
                WHEN LENGTH(MEM_BIRTH) >= 8 AND REGEXP_LIKE(MEM_BIRTH, '^\d{8,}$') 
                    THEN SUBSTR(MEM_BIRTH, 1, 4) || '-' || SUBSTR(MEM_BIRTH, 5, 2) || '-' || SUBSTR(MEM_BIRTH, 7, 2)
                ELSE '2000-01-01'
            END, 
            'YYYY-MM-DD'
        )
    )
) / 10) * 10
ORDER BY age_group
	</select>
	
	
</mapper>